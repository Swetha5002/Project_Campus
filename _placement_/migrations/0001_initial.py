# Generated by Django 5.1.4 on 2025-04-16 08:02

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('university_number', models.PositiveIntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('batch_year', models.PositiveSmallIntegerField(blank=True, default=2026, null=True, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2030)])),
                ('section', models.CharField(blank=True, max_length=10, null=True)),
                ('date_of_birth', models.DateField(blank=True, default=datetime.date(2000, 1, 1), null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('gender', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('O', 'Other')], default='M', max_length=1, null=True)),
                ('cgpa', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('average_percentage', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('linkedin_link', models.URLField(blank=True, null=True)),
                ('code_platforms', models.JSONField(blank=True, default=list, help_text="List of dictionaries containing 'platform_name' and 'profile_link'", null=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='placement_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='placement_user_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['batch_year', 'name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='PlacementStories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('image', models.ImageField(blank=True, max_length=500, null=True, upload_to='placement_story_images/%Y/%m/%d/')),
                ('company', models.CharField(db_index=True, max_length=255)),
                ('package', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('placement_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(2000)])),
                ('linkedin_profile', models.URLField(blank=True, max_length=500)),
                ('story', models.TextField()),
                ('story_narrator_keyTakeaways', models.JSONField(blank=True, default=list, help_text='List of key takeaways from the story', null=True)),
            ],
            options={
                'verbose_name_plural': 'Placement Stories',
                'ordering': ['-placement_year', 'company'],
                'indexes': [models.Index(fields=['company', 'placement_year'], name='Dplacement__company_aa7735_idx'), models.Index(fields=['-placement_year'], name='Dplacement__placeme_12cd9f_idx')],
            },
        ),
        migrations.CreateModel(
            name='StudentResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_code', models.CharField(db_index=True, max_length=20)),
                ('test_title', models.CharField(max_length=255)),
                ('date_of_exam', models.DateField()),
                ('time', models.TimeField()),
                ('percentage', models.FloatField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('status', models.CharField(choices=[('C', 'Completed'), ('M', 'Malpractice'), ('A', 'Absent')], default='C', max_length=1)),
                ('attended', models.BooleanField(default=False)),
                ('max_marks', models.FloatField(blank=True, null=True)),
                ('obtained_marks', models.FloatField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Result',
                'verbose_name_plural': 'Student Results',
                'ordering': ['-date_of_exam', '-time'],
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['batch_year'], name='Dplacement__batch_y_8ad5cc_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['name'], name='Dplacement__name_7feabe_idx'),
        ),
        migrations.AddIndex(
            model_name='studentresults',
            index=models.Index(fields=['-date_of_exam', '-time'], name='Dplacement__date_of_c07e18_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentresults',
            unique_together={('user', 'test_code')},
        ),
    ]
