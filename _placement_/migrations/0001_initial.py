# Generated by Django 5.2 on 2025-04-19 14:19

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(upload_to='materials/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Material',
                'verbose_name_plural': 'Materials',
            },
        ),
        migrations.CreateModel(
            name='QuestionPaper',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('paper_code', models.CharField(max_length=10, unique=True)),
                ('paper_title', models.CharField(max_length=255)),
                ('paper_description', models.TextField(blank=True, null=True)),
                ('time_limit', models.PositiveIntegerField(help_text='Time limit in minutes')),
                ('no_of_qs', models.PositiveIntegerField(blank=True, null=True)),
                ('total_marks', models.PositiveIntegerField(blank=True, null=True)),
                ('is_practice_paper', models.BooleanField(default=True)),
                ('is_assessment_paper', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Question Paper',
                'verbose_name_plural': 'Question Papers',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profile_images/')),
                ('university_number', models.PositiveBigIntegerField(blank=True, null=True, unique=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_of_birth', models.DateField(blank=True, default=datetime.date(2000, 1, 1), null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True)),
                ('gender', models.CharField(blank=True, choices=[('F', 'Female'), ('M', 'Male'), ('O', 'Other')], default='M', max_length=1, null=True)),
                ('cgpa', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(10.0)])),
                ('average_percentage', models.FloatField(blank=True, default=0.0, null=True, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('dsa_problem_solved_count', models.PositiveIntegerField(default=0)),
                ('dsa_last_updated', models.DateTimeField(blank=True, null=True)),
                ('leetcode_link', models.TextField(blank=True, max_length=200, null=True, verbose_name='LeetCode Profile')),
                ('gfg_link', models.TextField(blank=True, max_length=200, null=True, verbose_name='GeeksforGeeks Profile')),
                ('linkedin_link', models.URLField(blank=True, null=True)),
                ('hackerrank_link', models.TextField(blank=True, max_length=200, null=True, verbose_name='HackerRank Profile')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['batch', 'name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(blank=True, choices=[('ECE', 'Electronics and Communication Engineering'), ('CSE', 'Computer Science and Engineering'), ('ME', 'Mechanical Engineering'), ('CE', 'Civil Engineering'), ('EE', 'Electrical Engineering'), ('IT', 'Information Technology'), ('EEE', 'Electrical and Electronics Engineering'), ('AIDS', 'Artificial Intelligence and Data Science')], default='ECE', max_length=10, null=True)),
                ('end_year', models.PositiveSmallIntegerField(blank=True, choices=[(2025, 2025), (2026, 2026), (2027, 2027), (2028, 2028), (2029, 2029)], default=2029, null=True, validators=[django.core.validators.MinValueValidator(2000), django.core.validators.MaxValueValidator(2030)])),
                ('batch_admin', models.ForeignKey(blank=True, limit_choices_to={'is_superuser': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='administered_batches', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Batch',
                'verbose_name_plural': 'Batches',
                'ordering': ['department', 'end_year'],
                'unique_together': {('department', 'end_year')},
            },
        ),
        migrations.AddField(
            model_name='user',
            name='batch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='_placement_.batch'),
        ),
        migrations.CreateModel(
            name='PlacementStories',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('image', models.ImageField(blank=True, max_length=500, null=True, upload_to='placement_story_images/%Y/%m/%d/')),
                ('company', models.CharField(db_index=True, max_length=255)),
                ('package', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('placement_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(2000)])),
                ('linkedin_profile', models.URLField(blank=True, max_length=500)),
                ('story', models.TextField()),
                ('story_narrator_keyTakeaways', models.JSONField(blank=True, default=list, help_text='List of key takeaways from the story', null=True)),
            ],
            options={
                'verbose_name_plural': 'Placement Stories',
                'ordering': ['-placement_year', 'company'],
                'indexes': [models.Index(fields=['company', 'placement_year'], name='Dplacement__company_aa7735_idx'), models.Index(fields=['-placement_year'], name='Dplacement__placeme_12cd9f_idx')],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_image', models.ImageField(blank=True, null=True, upload_to='question_images/')),
                ('question_text', models.TextField()),
                ('mark', models.PositiveIntegerField(default=1)),
                ('option_A', models.TextField()),
                ('option_B', models.TextField()),
                ('option_C', models.TextField()),
                ('option_D', models.TextField()),
                ('correct_option', models.CharField(choices=[('A', 'Option A'), ('B', 'Option B'), ('C', 'Option C'), ('D', 'Option D')], default='A', help_text='Key of the correct option for MCQs.', max_length=1)),
                ('question_paper', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='_placement_.questionpaper')),
            ],
            options={
                'verbose_name': 'Question',
                'verbose_name_plural': 'Questions',
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('batch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sections', to='_placement_.batch')),
            ],
            options={
                'verbose_name': 'Section',
                'verbose_name_plural': 'Sections',
                'ordering': ['batch', 'name'],
            },
        ),
        migrations.AddField(
            model_name='user',
            name='section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='students', to='_placement_.section'),
        ),
        migrations.CreateModel(
            name='StudentResults',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_title', models.CharField(default='', max_length=255)),
                ('test_code', models.CharField(default='', max_length=10)),
                ('percentage', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('attended', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('Completed', 'Completed'), ('Malpractice', 'Malpractice')], default='Completed', max_length=20)),
                ('date_of_exam', models.DateField(blank=True, null=True)),
                ('time', models.TimeField(blank=True, null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Student Result',
                'verbose_name_plural': 'Student Results',
            },
        ),
        migrations.CreateModel(
            name='MistakenQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_code', models.CharField(max_length=100)),
                ('selected_option', models.CharField(max_length=255)),
                ('correct_option', models.CharField(max_length=255)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='_placement_.question')),
                ('student_result', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='mistaken_questions', to='_placement_.studentresults')),
            ],
        ),
        migrations.AddConstraint(
            model_name='section',
            constraint=models.UniqueConstraint(fields=('name', 'batch'), name='unique_section_per_batch'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['batch'], name='Dplacement__batch_i_7b62be_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['name'], name='Dplacement__name_7feabe_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mistakenquestion',
            unique_together={('user', 'question', 'test_code')},
        ),
    ]
